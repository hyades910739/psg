{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PSG week2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 使用iter()與next()做到迴圈for的效果\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "it = iter([1, 2, 3,]) # 產生可以迭代的物件"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "next(it) : 1\n",
      "next(it) : 2\n",
      "next(it) : 3\n"
     ]
    },
    {
     "ename": "StopIteration",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mStopIteration\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-7e8045a884c7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"next(it) :\"\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mit\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"next(it) :\"\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mit\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"next(it) :\"\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mit\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mStopIteration\u001b[0m: "
     ]
    }
   ],
   "source": [
    "print(\"next(it) :\" ,next(it) ) \n",
    "print(\"next(it) :\" ,next(it) )\n",
    "print(\"next(it) :\" ,next(it) )\n",
    "print(\"next(it) :\" ,next(it) ) # 當使用完 it 的物件時，就會顯示StopIteration的指令"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### yield就像是return會傳回值，但又不中斷函式的執行，產生器物件是個具有迭代器（Iterator）介面的物件，也就是說，它具有__next__()方法，可以使用next()函式來取出下一個值，若無法產生下一個值，則會丟出StopIteration物件。例如："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def countdown(n):\n",
    "    print(\"Starting to count from: \", n)\n",
    "    while n>0:\n",
    "        yield n\n",
    "        n -= 1\n",
    "    print(\"Done !!!\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = countdown(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting to count from:  3\n",
      "Done !!!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[3, 2, 1]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting to count from:  3\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp\n",
    "next(temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "next(temp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 反向迭代 - 內建function reversed()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "3\n",
      "2\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "a = [1,2,3,4]\n",
    "for i in reversed(a):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## itertools套件"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* 無限迭代器：生成一个無限序列，比如自然數序列 1, 2, 3, 4, ...；\n",
    "* 有限迭代器：接收一个或多个序列（sequence）作為參數，進行組合、分组和過濾等；\n",
    "* 组合生成器：序列的排列、组合等\n",
    "\n",
    "> 取材自 <a href = \"http://funhacks.net/2017/02/13/itertools/\"> 高效的 itertools 模塊"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 無限迭代器\n",
    "* count(`firstval=0`, `step=1`) 建造一个從 firstval (預設值為 0) 開始，以 step (預設值為1) 為增加幅度的整數迭代器。\n",
    "* cycle(`iterable`) 對iterable 中的元素反覆執行循環。\n",
    "* repeat(`object`, `times`)  反覆生成多個 object："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "# count function \n",
    "\n",
    "import itertools\n",
    "nums = itertools.count(10, 2)\n",
    "\n",
    "for i in nums:\n",
    "    if i > 20:\n",
    "        break\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 A\n",
      "2 B\n",
      "3 C\n",
      "4 A\n",
      "5 B\n",
      "6 C\n"
     ]
    }
   ],
   "source": [
    "# cycle function\n",
    "\n",
    "cycle_strings = itertools.cycle('ABC')\n",
    "i = 1\n",
    "for string in cycle_strings:\n",
    "    if i == 7:\n",
    "        break\n",
    "    print( i, string)\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello world ~\n",
      "hello world ~\n",
      "hello world ~\n"
     ]
    }
   ],
   "source": [
    "# repeat function\n",
    "\n",
    "for item in itertools.repeat('hello world ~', 3):\n",
    "    print(item)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 有限迭代器\n",
    "-----------------------\n",
    "+ chain(``iterable1``, `iterable2`, `iterable3`, ...) 合併多個迭代器，產生一個新的迭代 。\n",
    "+ compress(`data`, `selectors`) 當selectors 的某个元素為 true 時，則保留 data 對應位置的元素。\n",
    "+ dropwhile(`predicate`, `iterable`) 使用時，你給它傳遞一個函數對象和一個可迭代對 象。它會返回一個迭代器對象，丟棄原有序列中直到函數返回 True 之前的所有元素， 然後返回後面所有元素。\n",
    "+  groupby(`iterable`,`[, keyfunc]`) iterable 是一个可迭代對象，keyfunc 是分组函数，用於對 iterable 的連續向進行分组，如果不指定，則默認對 iterable 中的連續相同项進行分组，返回一个 (key, sub-iterator) 的迭代器。\n",
    "+  filter(`function or None`, `sequence`) 將 iterable 中 function(item) 為 True 的元素组成一个迭代器返回，如果 function 是 None，則傳回 iterable 中所有為 True 的項。\n",
    "+ islice(`iterable`, `[start,]`` stop`` [, step]`) iterable 是可迭代对象，start 是起始位置，stop 是结束位置，step 是幅度，start 和 step 可選。\n",
    "+ tee(`iterable [,n]`)  用於 iterable 創建 n 个獨立的迭代器，以tuple的形式返回，n 的默認值是 2。\n",
    "+ takewhile(`predicate`, `iterable`) predicate 是函數，iterable 是可迭代对象。對於 iterable 中的元素，如果 predicate(item) 為 true，則保留該元素，只要 predicate(`item`) 為 false，則立即停止迭代。\n",
    "+ zip(`iter1`, `iter2`, ..., `iterN`) 同時迭代多個序列，每次分別從一個序列中取一個元素"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "a\n",
      "b\n",
      "c\n"
     ]
    }
   ],
   "source": [
    "# chain\n",
    "from itertools import chain\n",
    "\n",
    "for item in chain([1, 2, 3], ['a', 'b', 'c']):\n",
    "    print (item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['A', 'B', 'D', 'F']\n",
      "['A', 'C']\n"
     ]
    }
   ],
   "source": [
    "# compress\n",
    "from itertools import compress\n",
    "\n",
    "print(list(compress('ABCDEF', [1, 1, 0, 1, 0, 1])))\n",
    "print(list(compress('ABCDEF', [True, False, True])))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x < 5:  [6, 2, 1]\n",
      "x > 3:  [2, 1, 6, 5, 4]\n"
     ]
    }
   ],
   "source": [
    "# dropwhile\n",
    "from itertools import dropwhile\n",
    "\n",
    "temp = list(dropwhile(lambda x: x < 5, [1, 3, 6, 2, 1]))\n",
    "print(\"x < 5: \", temp)\n",
    "\n",
    "temp = list(dropwhile(lambda x: x > 3, [2, 1, 6, 5, 4]))\n",
    "print(\"x > 3: \", temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a : ['a', 'a', 'a']\n",
      "b : ['b', 'b', 'b']\n",
      "a : ['a', 'a']\n",
      "c : ['c', 'c']\n",
      "d : ['d']\n"
     ]
    }
   ],
   "source": [
    "# groupby\n",
    "from itertools import groupby\n",
    "\n",
    "for key, value_iter in groupby('aaabbbaaccd'):\n",
    "    print(key, ':', list(value_iter))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 : ['a']\n",
      "2 : ['bb']\n",
      "3 : ['ccc']\n",
      "2 : ['dd']\n",
      "3 : ['eee']\n",
      "1 : ['f']\n"
     ]
    }
   ],
   "source": [
    "# groupby\n",
    "data = ['a', 'bb', 'ccc', 'dd', 'eee', 'f']\n",
    "for key, value_iter in groupby(data, len):    # 使用 len 函數作為分組的依據\n",
    "    print(key, ':', list(value_iter))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 : ['a']\n",
      "2 : ['bb', 'cc']\n",
      "3 : ['ddd', 'eee']\n",
      "1 : ['f']\n"
     ]
    }
   ],
   "source": [
    "# groupby\n",
    "data = ['a', 'bb', 'cc', 'ddd', 'eee', 'f']\n",
    "for key, value_iter in groupby(data, len):\n",
    "    print(key, ':', list(value_iter))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filter\n",
    "from itertools import filterfalse\n",
    "list(filter(lambda x: x < 6, range(10)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[6, 7, 8, 9]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filterfalse \n",
    "from itertools import filterfalse\n",
    "list(filterfalse(lambda x: x < 6, range(10)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 迭代器切片 - 當一般的截取片段的當一班的截取片段無法實行"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "def count(n):\n",
    "    while n>0:\n",
    "        n += 1\n",
    "        yield n "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = count(1) # x 是一個沒有上限的傢伙"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'generator' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-39-e846ca554b15>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: 'generator' object is not subscriptable"
     ]
    }
   ],
   "source": [
    "x[10,20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "import itertools\n",
    "\n",
    "for i in itertools.islice(x, 1, 5):  # islice 會逐一丟掉前面的元素，直到指定的位置，具有不可逆性。\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "9\n",
      "10\n",
      "11\n"
     ]
    }
   ],
   "source": [
    "for i in itertools.islice(x, 1, 5): \n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 如果知道欲開始的位置，也可以用islice去剔除不感興趣的資料"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "4\n",
      "10\n",
      "15\n"
     ]
    }
   ],
   "source": [
    "from itertools import islice\n",
    "\n",
    "items = ['a', 'b', 'c', 1, 4, 10, 15] \n",
    "\n",
    "for x in islice(items, 3, None):\n",
    "    print(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['a', 'b', 'c', 'd', 'e']\n",
      "['a', 'b', 'c', 'd', 'e']\n"
     ]
    }
   ],
   "source": [
    "# tee function \n",
    "\n",
    "from itertools import tee\n",
    "iter1, iter2 = tee('abcde')\n",
    "print(list(iter1))\n",
    "print(list(iter2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x< 5 : [1, 3]\n",
      "x > 3 :  []\n"
     ]
    }
   ],
   "source": [
    "# takewhiie\n",
    "from itertools import takewhile\n",
    "temp = list(takewhile(lambda x: x < 5, [1, 3, 6, 2, 1]))\n",
    "print(\"x< 5 :\",  temp)\n",
    "\n",
    "temp = list(takewhile(lambda x: x > 3, [2, 1, 6, 5, 4]))\n",
    "print(\"x > 3 : \", temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 101 2\n",
      "5 78 5\n",
      "4 37 7\n",
      "2 15 1\n",
      "10 62 3\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[(1, 101), (5, 78), (4, 37), (2, 15), (10, 62), (7, 99)]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# zip function\n",
    "xpts = [1, 5, 4, 2, 10, 7]\n",
    "ypts = [101, 78, 37, 15, 62, 99] \n",
    "zpts = [2, 5, 7, 1, 3]\n",
    "for x, y, z in zip(xpts, ypts,zpts): \n",
    "    print(x,y,z)\n",
    "\n",
    "list(zip(xpts, ypts))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 'w')\n",
      "(2, 'x')\n",
      "(3, 'y')\n",
      "(None, 'z')\n"
     ]
    }
   ],
   "source": [
    "# zip_longest\n",
    "from itertools import zip_longest \n",
    "\n",
    "a = [1, 2, 3]\n",
    "b = ['w', 'x', 'y', 'z']\n",
    "\n",
    "for i in zip_longest(a,b):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 组合生成器：序列的排列、组合等\n",
    "----------\n",
    "- product(`iter1`, `iter2`, ... `iterN`,` [repeat=1]`) \n",
    "- permutations(`iterable`,`r`)\n",
    "- combinations(`iterable`,`r`) / combinations_with_replacement(`iterable`,`r`) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('A', 'x')\n",
      "('A', 'y')\n",
      "('B', 'x')\n",
      "('B', 'y')\n",
      "('A', 'x', 'A', 'x')\n",
      "('A', 'x', 'A', 'y')\n",
      "('A', 'x', 'B', 'x')\n",
      "('A', 'x', 'B', 'y')\n",
      "('A', 'y', 'A', 'x')\n",
      "('A', 'y', 'A', 'y')\n",
      "('A', 'y', 'B', 'x')\n",
      "('A', 'y', 'B', 'y')\n",
      "('B', 'x', 'A', 'x')\n",
      "('B', 'x', 'A', 'y')\n",
      "('B', 'x', 'B', 'x')\n",
      "('B', 'x', 'B', 'y')\n",
      "('B', 'y', 'A', 'x')\n",
      "('B', 'y', 'A', 'y')\n",
      "('B', 'y', 'B', 'x')\n",
      "('B', 'y', 'B', 'y')\n"
     ]
    }
   ],
   "source": [
    "# product function \n",
    "from itertools import product\n",
    "\n",
    "for item in product('AB', 'xy'):\n",
    "    print (item)\n",
    "\n",
    "for item in product('AB', 'xy', repeat = 2):\n",
    "    print (item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('a', 'b', 'c')\n",
      "('a', 'c', 'b')\n",
      "('b', 'a', 'c')\n",
      "('b', 'c', 'a')\n",
      "('c', 'a', 'b')\n",
      "('c', 'b', 'a')\n"
     ]
    }
   ],
   "source": [
    "# permutations function \n",
    "items = ['a', 'b', 'c']\n",
    "\n",
    "from itertools import permutations\n",
    "\n",
    "for p in permutations(items):\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('a', 'b')\n",
      "('a', 'c')\n",
      "('b', 'a')\n",
      "('b', 'c')\n",
      "('c', 'a')\n",
      "('c', 'b')\n"
     ]
    }
   ],
   "source": [
    "for p in permutations(items, 2):\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('A', 'B')\n",
      "('A', 'C')\n",
      "('B', 'C')\n"
     ]
    }
   ],
   "source": [
    "# combinations function \n",
    "from itertools import combinations\n",
    "\n",
    "for b in combinations('ABC', 2):\n",
    "    print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('A', 'A')\n",
      "('A', 'B')\n",
      "('A', 'C')\n",
      "('B', 'B')\n",
      "('B', 'C')\n",
      "('C', 'C')\n"
     ]
    }
   ],
   "source": [
    "# combinations_with_replacement function \n",
    "from itertools import combinations_with_replacement\n",
    "\n",
    "for b in combinations_with_replacement('ABC', 2):\n",
    "    print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 迭代一個序列的同時追蹤正在被處理的元素索引\n",
    "--------\n",
    "- enumerate(`sequence`, `start`)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 a\n",
      "1 b\n",
      "2 c\n"
     ]
    }
   ],
   "source": [
    "my_list = ['a', 'b', 'c']\n",
    "for idx, val in enumerate(my_list): \n",
    "    print(idx, val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 a\n",
      "2 b\n",
      "3 c\n"
     ]
    }
   ],
   "source": [
    "my_list = ['a', 'b', 'c']\n",
    "for idx, val in enumerate(my_list, 1): \n",
    "    print(idx, val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A\n",
      "B\n",
      "C\n",
      "a\n",
      "b\n",
      "c\n"
     ]
    }
   ],
   "source": [
    "a = ['a','b','c']\n",
    "b = ['A','B','C']\n",
    "for c in heapq.merge(a, b): \n",
    "    print(c)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
